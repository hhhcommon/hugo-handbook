{"./":{"url":"./","title":"前言","keywords":"","body":"Hugo 静态网站构建手册 本手册将指导你如何使用Hugo构建静态网站用于个人博客或者项目展示。 手把手教你如何从0开始构建一个静态网站，这不需要有太多的编程和开发经验和时间投入，也基本不需要多少成本（除了个性化域名），使用GitHub和Hugo模板即可快速构建和上线一个网站。 在线浏览地址：https://jimmysong.io/hugo-handbook Github地址：https://github.com/rootsongjc/hugo-handbook 目标读者 本文档适用于以下用户： 对网站构建不太了解，没有web开发经验的用户 希望快速构建一个网站，个性化需求不多，不想花费太多精力打理，更新不多的用户 希望学习网站构建、网站模板、web开发的用户 对Go语言感兴趣，希望从事开源项目的用户 贡献者 感谢此书的贡献者。 致谢 Algolia Cloudinary Cloudflare GitHub pages Hugo Namecheap Steve Francia Hugo 中国用户组 欢迎加入Hugo中国用户组，请扫描我的微信二维码，备注加入Hugo中国用户组，我将会把你拉入微信群中。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"concepts/principle.html":{"url":"concepts/principle.html","title":"静态网站构建原理","keywords":"","body":"静态网站构建原理 世界上的网站上千万，网页数量更是如天上的星星数也数不清。那么这些网站都是如何构建的？都包括哪些类型呢？笼统的概括世界上的网站分为两种类型： 静态网站：仅提供展示功能，不能与用户交互，不需要后端数据库存储用户信息 交互式网站：需要与用户交互，保存用户信息 大多数现代Web应用程序使用层叠样式表（CSS）、JavaScript、图片甚至是特殊的字体和字形库，如Awesome字体，这也是我们工具箱中最常用的库之一。 几乎所有的网站中都会包含一个静态文件目录 static，这个目录下包含三个目录，分别保存着三类文件： js：Javascript images：图片 css：层叠样式表和字体 我们不会为每个网站分别导入不同的样式信息，而是使用模板来生成网页的不同部分。 我们在下一章中将分别介绍三款流行的静态网站生成工具。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"tools/intro.html":{"url":"tools/intro.html","title":"静态网站构建工具简介","keywords":"","body":"静态网站构建工具简介 使用静态网站构建工具不但可以让我们构建静态网站的工作大大简化，而且还可以迅速验证自己的想法，以最高效的方式开发网站。 这一章中将分别介绍三款流行的开源静态网站构建工具，然后说明为什么我们选择使用Hugo来构建静态网站。 对比 下面是三款静态网站构建工具的简要对比： 工具名称 开发语言 构建效率 典型用例 特点 jekyll ruby 比较慢 GitHub Pages默认的静态网站构建工具、kubernetes官网 历史悠久，开源已9年，模板和插件众多，但是构建速度慢 hexo node.js 一般 个人博客、产品展示 页面酷炫，前端开发者用户居多 hugo go 极快 个人博客、产品展示 Go大神spf13开发，开源已4年，升级活跃，构建速度极快，后端开发者用户居多 以上工具都可以将markdown内容转换为静态页面。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"tools/jekyll.html":{"url":"tools/jekyll.html","title":"Jekyll简介","keywords":"","body":"Jekyll 简介 Jekyll 是最早开始流行的静态网站构建工具，使用Ruby语言开发，开源已有9个年头了，是Github Pages默认的静态网站构建工具。当前互联网上有大量基于jekyll构建的静态网站，包括现在流行的开源容器编排调度引擎kubernetes的官网。 Jekyll的理念 Jekyll网站构建的理念就是只做用户告诉它要做的事情，不多也不少： No Magic：简单易懂 It “Just Works”：初始化网站配置，不需要为让用户操心 Content is King：内容为王，这是用于应该真正关心的部分 Stability：向后兼容，容易维护 Small & Extensible：核心功能满足90%用户的需求，其它功能使用插件形式，易于集成 以上理念也被后来出现的其它静态网站构建工具所传承。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"tools/hexo.html":{"url":"tools/hexo.html","title":"Hexo简介","keywords":"","body":"Hexo简介 Hexo是一款使用node.js开发的静态网站构建工具，便于构建华丽绚烂的页面。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"tools/hugo.html":{"url":"tools/hugo.html","title":"Hugo简介","keywords":"","body":"Hugo简介 Hugo是由Steve Francis基于Go语言开发的静态网站构建工具。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"hugo/why-hugo.html":{"url":"hugo/why-hugo.html","title":"使用Hugo进行网站构建","keywords":"","body":"为何使用Hugo进行网站构建 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"hugo/get-familar-with-git-and-github.html":{"url":"hugo/get-familar-with-git-and-github.html","title":"熟悉Git和GitHub","keywords":"","body":"熟悉Git和GitHub 我们使用Git和GitHub来管理和托管网站代码，因此对于没有Git使用经验的人来说，有必要先简单的熟悉下Git和GitHub。 Git常用命令 git init：初始化本地代码仓库； git remote add origin ：将本地目录链接到远程服务器的代码仓库，这样所有的更改都可以提交的远程仓库； Git status：列出所有已添加的文件/目录，或者是被修改和需要提交的文件/目录； Git add * 或者git add ：添加文件/目录才能追踪本地文件，才可以被提交 git commit -m \"提交信息\"：此命令可帮助您在本地计算机中提交跟踪的更改，并生成可识别更新代码的提交ID Git commit -am \"提交信息\"：和上个命令唯一的不同就是，在将所有的文件添加到预演（stage）中后，该命令会根据操作系统打开一个默认的文本编辑器，例如Ubuntu使用Vim，Windows中使用Notepad++来提交这些信息。 git push origin master：将最后一次提交的代码推送到远程代码仓库 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"hugo/install-hugo.html":{"url":"hugo/install-hugo.html","title":"安装Hugo","keywords":"","body":"安装hugo Hugo的安装十分简单，安装时不需要安装任何依赖软件，其本身只是一个二进制文件，可以使用以下几种方式安装： 直接使用二进制文件安装 到Hugo release下载对应系统的安装包，解压后放到$PATH目录下即可使用 使用go get安装 这种安装方式的前提是您的电脑上已经配置了Go开发环境，为了简单起见，建议直接下载编译好的发型版安装。 go get -u -v github.com/gohugoio/hugo 详细方式请参考：https://github.com/gohugoio/hugo Brew安装 如果您是Mac用户，可以使用brew命令来安装。 brew install hugo 注意：这种安装方式安装的往往不是最新版本的hugo，如果要使用最新版的hugo，请使用前两种方式安装。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"hugo/template-introduction.html":{"url":"hugo/template-introduction.html","title":"Template说明","keywords":"","body":"Template说明 Hugo中包括两种类型的template：single template和list template。 参考 Go html template Hugo template Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"steps/":{"url":"steps/","title":"网站构建流程详解","keywords":"","body":"网站构建流程详解 教你从零开始一步步使用Hugo构建静态网站，内容详略得当，图文并茂。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/create-github-pages.html":{"url":"steps/create-github-pages.html","title":"创建GitHub Pages","keywords":"","body":"创建GitHub Pages 任何人都可以申请GitHub，并开通GItHub Pages，这都是免费的。 假如您的GitHub帐号为alice，则需要创建一个这样的GitHub repo作为您的GitHub Pages托管仓库：alice.github.io，只有这样的仓库名称才可以作为您的GitHub Pages的入口页面，而其他的GitHub Pages则是在该页面的子级URL下，如http://alice.github.io/blog、http://alice.github.io/project等。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"steps/domain-name-apply.html":{"url":"steps/domain-name-apply.html","title":"申请域名","keywords":"","body":"申请域名 通过国外的渠道申请的域名不需要备案，将会为你的网站构建省去很多麻烦，但是也要注意遵守国家法律。 namecheap godaddy Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"steps/dns-setup.html":{"url":"steps/dns-setup.html","title":"配置DNS解析","keywords":"","body":"配置DNS解析 为了让用户访问域名能够解析到我们申请的GitHub Pages上，需要为GitHub Pages设置CNAME，同时再将我们申请的域名解析到GitHub Pages上。 GitHub设置CNAME 在GitHub Pages的项目根目录下创建一个名为CNAME的文件。 文件中的内容为你申请的域名，如 jimmysong.io godaddy修改域名DNS 第一、登录域名管理列表 第二、选择修改DNS 如果是godaddy新注册的帐户, 请确保邮箱已验证. 第三、选择自定义DNS Add Nameserver 输入的就是 cloudflare 注册时, 为您提供的 nameserver. 最后，等待大约3分钟，就会将所有的域名全部修改完毕DNS和生效。 Cloudflare配置DNS 在Cloudflare上配置DNS解析。 配置如下图所示，最后一行是自动生成的。 图 5.4.1：Cloudflare页面 这样实际上将用户访问https://jimmysong.io跳转到Github Pages的域名，但是用户看到的仍然是https://jimmysong.io的域名。 致谢 GoDaddy批量使用第三方CloudFlare DNS 国外免费DNS,CDN加速CloudFlare申请使用教程 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"steps/env-setup.html":{"url":"steps/env-setup.html","title":"网站构建环境配置","keywords":"","body":"网站构建环境配置 我们的网站会用到以下组件： Hugo：用于静态html生成和进行内容管理 Cloudinary：用于托管图片和静态文件 GitHub：用于存储网站代码同时托管网站 Algolia：用于站内搜索 CloudFlare：用于DNS解析和CDN加速 使用stacks-cli命令行工具可用于分析任何网站的技术栈，Chrome浏览器也提供了这样的工具Wappalyzer。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/themes.html":{"url":"steps/themes.html","title":"主题选择与调试","keywords":"","body":"主题选择与调试 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/static-file-storage.html":{"url":"steps/static-file-storage.html","title":"静态文件存储","keywords":"","body":"静态文件存储 我推荐将静态文件跟网站的代码、主题、主体文件分开存储，这样的好处是： 可以使用CDN加快静态文件的访问速度 单独管理静态文件，方便重复应用 可以使用其他工具对静态文件的使用和流量进行控制 云存储 我推荐使用如下两种云存储： 七牛云：https://www.qiniu.com Cloudinary: https://www.cloudinary.com 我将分别介绍两种云储存服务，及其各自的优缺点。 七牛云存储 七牛云是中国知名的云存储公司，提供对象存储、CDN和PaaS平台等企业级服务。 七牛云存储提供了免费CDN配额：存储空间10GB，每月下载流量10GB，每月PUT/DELETE 10万次请求，每月GET 100万次请求。月流量在10GB以下的网站基本上可以一直免费使用七牛云存储CDN服务。 图 5.7.1：七牛云对象存储页面 七牛云可以通过API也可以直接通过Web上传文件和对文件进行简单的管理。 图 5.7.2：七牛云存储文件管理页面 Cloudinary Cloudinary的免费套餐如下： 20,000 + 7,500 Extra Monthly Transformations 300,000 + 300,000 Extra Total Images 10 GB + 3 GB Extra Managed Storage 20 GB + 6 GB Extra Monthly Viewing Bandwidth Extra的资源是通过facebook和Twitter给他们分享后获得的，这些免费资源基本可以满足一个普通博客的需求。 下图是媒体库，可以选择图片、音视频、文件、中断队列来对整个媒体库的内容进行分类。 图 5.7.3：Cloudniary媒体库 点击单张图片进入详情页面，可以分别对每张图片进行操作，例如裁剪、增加水印、缩略图等。 图 5.7.4：图片详情页面 对比 下面将从以下几个方面对两种云存储进行对比，供大家参考。 云储存 七牛云 Cloudinary 易用性 适应国内用户的操作习惯，提供命令行工具和众多的开源工具支持 纯英文界面，web操作不够友好，页面在国内访问比较慢，但是提供了多种语言的API支持，很多国外的博客管理软件默认使用的云存储，支持文件访问次数和访问来源等多种统计功能 免费额度 10G存储，每月10G流量 13G存储、月26G流量、30万张图片、月27,500张图片转换 https支持 需要自行设置证书，默认不支持，https流量需要单独计费，不提供免费https流量 默认支持https，不区分https和http流量 访问速度 国内用户访问速度极快 访问速度很快，完全满足要求 文件操作 没有文件的历史版本信息 保留文件的历史版本，提供免费的图片转换额度 因为cloudinary保存的文件默认支持https并且月流量为26G，远远大于七牛云，并且提供很很友好的图片引用和调用统计功能，因此我将原来在七牛云中的存储的文件迁移到了cloudinary中。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/web-analytics-plugin.html":{"url":"steps/web-analytics-plugin.html","title":"网站统计工具","keywords":"","body":"网站统计工具 百度统计 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/searching-plugin.html":{"url":"steps/searching-plugin.html","title":"站内搜索插件","keywords":"","body":"站内搜索插件 Hugo是由 Steve Francis 大神(http://spf13.com/)基于Go语言开发的静态网站构建工具。没错你现在看到的本博客blog.qikqiak.com就是基于Hugo的，使用 Hugo 创建一个网站是非常简单的，基本上没有什么门槛，官方还提供了大量的主题供你选择，你只需要专心写你的文章就行。不过有个问题是搜索，我们知道搜索属于动态行为了，如何给静态网站增加搜索功能呢？当然我们可以使用Google的站内搜索功能，Hugo 官方也提供了一些开源的和商业的解决方案，今天我们要介绍的就是一个非常优秀的商业解决方案：Algolia。 简介 Algolia是为你的 APP 或者网站添加搜索的最佳方式。 开发人员可以使用 API 上传并同步希望搜索的数据，然后可以进行相关的配置，比如产品转化率等等。可以使用 InstantSearch 等前端框架进行自定义搜索，为用户创造最佳的搜索体验。 注册 前往官方网站https://www.algolia.com/ 使用 GitHub 或 Google 帐号登录。登录完成后根据提示信息填写一些基本的信息即可，注册完成后前往 Dashboard，我们可以发现 Algolia 会默认给我们生成一个 app。 选择 Indices，添加一个新的索引，我们这里命名为qikqiak-blog，创建成功后，我们可以看到提示中还没有任何记录。 Algolia 为我们提供了三种方式来增加记录：手动添加、上传 json 文件、API。我们这里使用第三种方式来进行数据的添加。 插件 要使用 API 的方式来添加搜索的数据，我们可以自己根据 Algolia 提供的 API 文档进行开发，这也是很容易的，为简单起见，我们这里使用一个hugo-algolia的插件来完成我们的数据同步工作。 要安装hugo-aligolia我们需要先确保我们已经安装了 npm 或者 yarn 包管理工具。 使用下面的命令安装即可： $ npm install hugo-algolia -g 安装完成后，在我们 hugo 生产的静态页面的根目录下面新建一个config.yaml的文件(和config.toml同级)，然后在config.yaml文件中指定 Algolia相关的 API 数据。 --- baseurl: \"/\" DefaultContentLanguage: \"zh-cn\" hasCJKLanguage: true languageCode: \"zh-cn\" title: \"River's Site\" theme: \"beautifulhugo\" metaDataFormat: \"yaml\" algolia: index: \"qikqiak-blog\" key: \"3f541d53f128036d7542f6f2362d4a67\" appID: \"XYLRNJ38SQ\" --- API 相关数据可以前往 dashboard 的 API Keys查看，注意上面的key是Admin API Key。 配置完成以后，在根目录下面执行下面的命令： $ hugo-algolia -s JSON index file was created in public/algolia.json { updatedAt: '2018-02-23T02:36:09.480Z', taskID: 249063848950 } 然后我们可以看到，上面命令执行完成后会在public目录下面生成一个algolia.json的文件。这个时候我们在 dashboard 中打开 Indices，可以看到已经有几十条数据了。 如果某篇文章不想被索引的话，我们只需要在文件的最前面设置 index 参数为 false 即可，hugo-algolia插件在索引的过程中会自动跳过它。 前端 现在我们将需要被搜索的文章数据已经成功提交到Algolia，接下来的事情就是前端页面的展示了。下面的操作对于不同的主题或许有不同的地方，请根据自己的实际情况进行相应的修改。我这里使用的是beautifulhugo主题，在themes/beautifulhugo/layouts/partials目录下面新增文件：（search.html） var client = algoliasearch(\"XYLRNJ38SQ\", \"3f541d53f128036d7542f6f2362d4a67\"); var index = client.initIndex('qikqiak-blog'); autocomplete('#aa-search-input', { hint: false}, { source: autocomplete.sources.hits(index, {hitsPerPage: 8}), displayKey: 'name', templates: { suggestion: function(suggestion) { console.log(suggestion); return '' + '' + suggestion._highlightResult.title.value + ''; } } }); 注意上面 JS 代码： var client = algoliasearch(\"XYLRNJ38SQ\", \"3f541d53f128036d7542f6f2362d4a67\"); var index = client.initIndex('qikqiak-blog'); 其中algoliasearch的第一个参数为Application ID，第二个参数为Search-Only API Key，下面的initIndex方法的参数为我们创建的索引名称qikqiak-blog。 然后我们只需要添加一个搜索入口即可，在themes/beautifulhugo/layouts/partials/nav.html文件最下面添加如下代码： &times; Search blog.qikqiak.com {{ partial \"search.html\" . }} close 并且在下面代码下面，添加搜索入口按钮 只要在config.toml文件[Params]里面带有algolia = \"xxxxxxxxxxx\"，配置按钮的配置就会生效。 {{ if isset .Site.Params \"gcse\" }} {{ i18n \"gcseLabelShort\" }} {{ end }} {{ if isset .Site.Params \"algolia\" }} {{ i18n \"gcseLabelShort\" }} {{ end }} 其中最重要的代码是引入上面我们新建的search.html文件。剩下的就是一些美化搜索页面的工作，新建themes/beautifulhugo/static/css/search.css文件： @import 'https://fonts.googleapis.com/css?family=Montserrat:400,700'; .aa-input-container { display: inline-block; position: relative; width: 100%; } .aa-input-container span,.aa-input-container input { width: inherit; } .aa-input-search { width: 300px; padding: 12px 28px 12px 12px; border: 2px solid #e4e4e4; border-radius: 4px; -webkit-transition: .2s; transition: .2s; font-family: \"Montserrat\", sans-serif; box-shadow: 4px 4px 0 rgba(241, 241, 241, 0.35); font-size: 11px; box-sizing: border-box; color: #333; -webkit-appearance: none; -moz-appearance: none; appearance: none; } .aa-input-search::-webkit-search-decoration, .aa-input-search::-webkit-search-cancel-button, .aa-input-search::-webkit-search-results-button, .aa-input-search::-webkit-search-results-decoration { display: none; } .aa-input-search:focus { outline: 0; border-color: #3a96cf; box-shadow: 4px 4px 0 rgba(58, 150, 207, 0.1); } .aa-input-icon { height: 16px; width: 16px; position: absolute; top: 50%; right: 16px; -webkit-transform: translateY(-50%); transform: translateY(-50%); fill: #e4e4e4; } .aa-hint { color: #e4e4e4; } .aa-dropdown-menu { background-color: #fff; border: 2px solid rgba(228, 228, 228, 0.6); border-top-width: 1px; font-family: \"Montserrat\", sans-serif; width: 300px; margin-top: 10px; box-shadow: 4px 4px 0 rgba(241, 241, 241, 0.35); font-size: 11px; border-radius: 4px; box-sizing: border-box; } .aa-suggestion { padding: 12px; border-top: 1px solid rgba(228, 228, 228, 0.6); cursor: pointer; -webkit-transition: .2s; transition: .2s; display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-pack: justify; -ms-flex-pack: justify; justify-content: space-between; -webkit-box-align: center; -ms-flex-align: center; align-items: center; } .aa-suggestion:hover, .aa-suggestion.aa-cursor { background-color: rgba(241, 241, 241, 0.35); } .aa-suggestion > span:first-child { color: #333; } .aa-suggestion > span:last-child { text-transform: uppercase; color: #a9a9a9; } .aa-suggestion > span:first-child em, .aa-suggestion > span:last-child em { font-weight: 700; font-style: normal; background-color: rgba(58, 150, 207, 0.1); padding: 2px 0 2px 2px; } 当然还得在页面中引入上面的 CSS 样式文件，在文件themes/beautifulhugo/layouts/partials/head.html的head区域添加如下代码： 搜索 上面的所有工作完成后，我们重新生成静态页面，更新网站数据。我们可以看到导航栏最右边已经有了一个搜索按钮了。 参考资料 https://github.com/rootsongjc/beautifulhugo https://gohugo.io/tools/search/ https://www.npmjs.com/package/hugo-algolia https://blog.qikqiak.com/post/hugo-integrated-algolia-search/ Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/comment-plugin.html":{"url":"steps/comment-plugin.html","title":"网站评论插件","keywords":"","body":"网站评论插件 前面我们为Hugo集成了Algolia搜索插件，要让我们的网站具备博客的基本功能的话，一般情况下评论也是非常需要的，评论承载着作者与读者之间交流的桥梁，所以我们可以看到市面上有很多单独的评论服务，比如最出名的disqus，国内也有之前比较出名的多说(现在已经关闭)、有言等等，要使用他们非常简单，只需要嵌入一些简单的代码即刻开启移动社交评论 服务。不是这些服务不好，只是觉得稍微有点笨重，这里我们使用一个基于GitHub Issues的轻量级评论系统：Gitment。 简介 Gitment是一款基于 GitHub Issues 的评论系统，支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。 注册 前往网站https://github.com/settings/applications/new注册一个新的OAuth Application应用，其他内容无所谓，其中Callback URL为你的网站域名(比如我们这里是：https://blog.qikqiak.com)，然后你就可以得到一个client id和一个client secret，这两个数据将用于后面的用户登录使用。 引入 Gitment 要引入 Gitment 是很简单的，但是由于我们的 Hugo 使用的是beautifulhugo主题，所以下面的并不能保证所有的主题都是这样操作的，不过基本的套路基本上是一致的。在文件themes/beautifulhugo/layouts/_default/single.html文件最下方找一个合适的文件添加如下代码： {{ if (.Params.gitment) }} var gitment = new Gitment({ id: '{{ .Slug }}', // 可选, 默认为 location.href owner: '你的 GitHub ID', repo: '存储评论的 repo', oauth: { client_id: '你的 client ID', client_secret: '你的 client secret', } }) gitment.render('git-comments') {{ end }} 注意上面的参数id是可选的，默认为location.href，即当前页面的 URL，但是最好能够自己定义一个唯一的 ID，用默认的有可能会出现422错误，因为默认的 URL 太长了，所以我们这里使用了一个参数{{ .Slug }}，读取页面的slug参数，另外我们还通过参数(.Params.gitment)来控制是否加载Gitment插件，这样我们就可以在页面中通过gitment参数来控制了。如下是当前文章的meta信息参数： --- title: Hugo 集成 Gitment 评论插件 date: 2018-03-05 tags: [\"Hugo\", \"gitment\", \"github\"] slug: hugo-integrated-gitment-plugin gitment: true category: \"hugo\" --- 所以如果gitment参数为 true，则 slug 参数就是必须填写的了，而且还不能和其他页面的 slug 冲突，gitment参数为 false 的时候，页面就不会加载Gitment插件了。 初始化评论 页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮，然后其他用户即可在该页面发表评论了，可以前往网站https://blog.qikqiak.com点击任意一篇文章即可查看 Demo： 总结 Gitment是一款非常优秀的评论插件，在使用的时候完全不用拘泥于本篇文章，只要是你能将你的文章和 Github issues 进行一一关联，就可以很方便的集成Gitment插件，因为该插件本身就是对 Github issues API 的操作，比如我们的Python微服务实战网站也集成了该插件，而且我们还可以很方便的自定义其样式。 参考资料 https://imsun.github.io/gitment/ Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"steps/social-share-plugin.html":{"url":"steps/social-share-plugin.html","title":"社交化分享工具","keywords":"","body":"社交化分享工具 addthis jiathis ishare Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/security.html":{"url":"steps/security.html","title":"网站安全性","keywords":"","body":"网站安全性 当我的网站 https://jimmysong.io 没有开启 https 的时候，打开网站经常能看到各种莫名其妙的广告。实在受不了无耻的运营商劫持，如下图： 图 5.12.1：运营商劫持 总是在我的网站页面上植入广告，尤其是在微信中打开我的网站链接然后选择在浏览器中打开的时候，最近总是植入广告，迫不得已我要开启https。 因为是用的是 Github Page，启用了自定义域名就无法再在Github中配置开启https，只能自己另想办法。 参考这篇文章 ➡️ 开启 Github Pages 自定义域名 HTTPS 和 HTTP/2 支持 &#x1F44F;&#x1F44F; 开启https步骤说明 这一切都是免费的，只需要以下几个步骤： 在 cloudflare 注册，经过一系列对你的网站自动检测后，获得新的 nameserver 地址； 和我的域名注册机构 namecheap 配置一下，修改 nameservers 记录为刚才在 cloudflare 上获得的 nameserver 地址； 在 Cloudflare 上配置 Page Rules：加入一条规则 http://jimmysong.io/* 设置为 Always Use HTTPS 修改网站代码中的 css 和 js 文件地址为 https； 等几分钟访问网站 http://jimmysong.io 后就会跳转为 https://jimmysong.io 。 遗留问题 该过程中主要遇到下面两个问题： 需要在网站代码中名为指定 css 和 js 文件的路径要包含域名，使用相对路径的话仍然会以 http 的形式加载，将导致网站无法加载样式； 第一次使用 https://jimmysong.io 访问的时候可能会提示证书问题，一旦选择信任后在后续访问的过程中就不会再提示。 因为图片保存在七牛云中，没有使用证书，访问包括图片的网址后会自动变回 http，考虑今后将图片直接放到 GitHub 中存储。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/website-performence-optimization.html":{"url":"steps/website-performence-optimization.html","title":"网站性能优化","keywords":"","body":"网站性能优化 对于静态网站，主要可以优化的地方就是网站的加载速度。 了解你的网站性能 查看世界各地访问该网站的速度。 使用ping.pe，ping jimmysong.io的效果如图： 图 5.13.1：jimmysong.io 另外还可以使用Grafana的插件，并安装worldping插件，效果如下图所示： 图 5.13.2：Grafana中监控的jimmysong.io Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/seo.html":{"url":"steps/seo.html","title":"搜索引擎优化（SEO）","keywords":"","body":"搜索引擎优化（SEO） 搜索引擎优化简称SEO（Search Engine Optimizing）。 在您的网站上线后，做SEO时需要检查如下内容： 集成Google Analytics或百度统计 为页面增加header信息，如title和description sitemap.xml，大多数网站生成工具都会自动生成站点地图，生成之后将其URL提交的Google Webmaster Tools。 robots.txt，阻止搜索引擎爬取网站上的敏感网页 结构化数据：可以帮助爬虫理解页面内容，参考HTML5的结构化数据 检测破损URL 使用Google webmaster可以检测网站的破损URL，如下图所示： 图 5.14.1：Google webmaster页面 Hugo SEO 下面是对使用 Hugo 生成静态网页的 SEO 优化建议。 页面关键词 为每篇博文设置关键词： --- keywords: - mysite - mysite keyword - Another useful keyword title: My Homepage --- 需要在文章模板的 header 的 中添加关键词字段。 页面标题 同样，每篇文章都要有一个标题，这样方便搜索引擎收录，Hugo 生成的文章一般都会在文章的头部增加该字段，同时文章模板的 header 中也需要有 标签。 {{ $isHomePage := eq .Title .Site.Title }}{{ .Title }}{{ if eq $isHomePage false }} - {{ .Site.Title }}{{ end }} 也可以在 meta 中添加标题标签。 页面描述 在 hugo 的网站配置文件 config.toml 中设置网站的配置信息，这将显示在浏览器的标签上，该设置是 hugo 内置的。 [params] description = \"Site stuff for being a good site with internet tubez.\" 同时也可以为每篇文章设置描述信息，这个 description 是十分有用的，当你通过各种社交软件分享页面的时候会解析该字段，同时显示页面的描述信息。 --- keywords: - mysite - mysite keyword - Another useful keyword title: My Homepage description: Where you should come to find my homepage updates and stuff --- 同样是在模板的 header 中的加入标签。 要时刻牢记 SEO 的观念，你的文章是你对外的最好展示窗口，当你将文章的信息格式化话后，还可以对自己发表的文章进行统计分析。 下面是SEO checklist供大家参考： 图 5.14.2：SEO checklist 参考 Front-End-Checklist - Github SEO 查询 - 站长之家 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"steps/custom-email-server.html":{"url":"steps/custom-email-server.html","title":"自定义邮件服务器","keywords":"","body":"自定义邮件服务器 我们当初在注册域名之时没有开设域名邮箱，如果开设的话需要另外付费。我们使用了免费版的腾讯企业邮箱。 免费版本的腾讯企业邮箱有以下限制： 50人帐号上限 2G邮箱容量 2G企业网盘 2G个人中转站 步骤 创建个人域名邮箱的步骤为： 申请一个腾讯企业邮箱 在cloudflare的DNS中增加MX字段 在申请的腾讯企业邮箱中增加成员邮箱地址 配置邮件收发客户端 配置邮件客户端 POP3/SMTP协议接收邮件服务器：pop.exmail.qq.com ，使用SSL，端口号995 发送邮件服务器：smtp.exmail.qq.com ，使用SSL，端口号465 在Mac中配置Mail中的邮箱账号，如下图所示。 图 5.15.1：Mac邮箱客户端配置 在iPhone中配置邮件客户端如下图所示。 图 5.15.2：iOS邮箱设置 图 5.15.3：iOS邮箱设置 参考 How do I add or edit mail or MX records? 如何使用域名在客户端设置IMAP、POP3/SMTP？ 如何设置IMAP、POP3/SMTP及其SSL加密方式？ Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:16 "},"themes/beautifulhugo-overview.html":{"url":"themes/beautifulhugo-overview.html","title":"BeautifulHugo主题概览","keywords":"","body":"BeautifulHugo主题使用说明 BeautifulHugo 这款主题适合于个人博客。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"themes/hugo-universal-overview.html":{"url":"themes/hugo-universal-overview.html","title":"hugo-universal主题使用说明","keywords":"","body":"hugo-univeral主题概览 hugo-universal 这款主题适用于产品简介、公司介绍和门户网站。经过修改后该主题有以下特点： 响应式设计 可自定义的登陆页面 多套 CSS style 可选，自由选择网站色系 移动端友好 代码高亮 示例 下面是几个使用该主题的示例网站。 https://dataikudss.com https://servicemesher.github.io https://themes.gohugo.io/theme/hugo-universal-theme Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"themes/hugo-universal-templates.html":{"url":"themes/hugo-universal-templates.html","title":"hugo-universal主题模块说明","keywords":"","body":"hugo-universal主题模块说明 使用该主题的网站的config.toml配置文件示例如下（以https://servicemesher.github.io/为示例）： # 网站的根URL baseurl = \"https://servicemesher.github.io/\" # 首页的标题 title = \"ServiceMesher\" # 设置使用的主题 theme = \"hugo-universal-theme\" # 设置网站默认的语言，所有的语言翻译文件在i18n目录下，文件名于此处配置的语言代码相同 languageCode = \"zh\" defaultContentLanguage = \"zh\" # 值为空的话则不启用disqus，因为需要翻墙才能访问，所以我们不启用 disqusShortname = \"\" # 取消默认的代码高亮，我们使用prism代码高亮 pygmentsUseClasses = false pygmentCodeFences = true # 每页显示的文章数量用于分页 paginate = 10 [menu] # 板块化分 # 权重对应在页面上显示的次序 [[menu.main]] name = \"主页\" url = \"/\" weight = 1 [[menu.main]] name = \"博客\" url = \"/blog/\" weight = 2 [[menu.main]] name = \"活动\" identifier = \"activity\" url = \"/activity/\" weight = 3 [[menu.main]] name=\"黄页\" url = \"/awesome-servicemesh/\" weight = 4 [[menu.main]] name = \"联系我们\" url = \"/contact/\" weight = 5 # 顶栏，可选择显示 [[menu.topbar]] weight = 1 name = \"GitHub\" url = \"https://github.com/servicemesher\" pre = \"\" [[menu.topbar]] weight = 4 name = \"Email\" url = \"mailto:jimmysong@jimmysong.io\" pre = \"\" # 配置参数，HTML中可以引用 [params] viewMorePostLink = \"/blog/\" author = \"ServiceMesher\" # 文章默认的SEO设置 defaultKeywords = [\"service mesh\"] defaultDescription = \"Service Mesh爱好者网站\" # 浏览器中看到每一页的后缀，与原文标题使用·分隔 description = \"Service Mesh爱好者\" # 留空，不启用谷歌地图 googleMapsApiKey = \"\" # Baidu统计的token baiduKey=\"761ec5e305f799778975c1f71c47a520\" # 选用的 CSS，可选的有：default（浅蓝）、blue、green、marsala,、pink、red、turquoise、violet（我用的这个） style = \"violet\" # 404页面显示的图片 errorimage = \"https://ws1.sinaimg.cn/large/00704eQkgy1frkahxdca2j30hd08wq52.jpg\" # 页脚显示的关于信息 about_us = \"Service Mesh 爱好者\" copyright = \"Copyright ©️ 2018, ServiceMesher all rights reserved.\" # Go语言格式的时间模板 date_format = \"2006-01-02\" # 网站logo logo = \"img/logo.png\" address = \"\"\"ServiceMesher. \"\"\" [Permalinks] # 博客中文章的URL规则，可以为/blog/2018/05/24/mypost/ #blog = \"/blog/:year/:month/:day/:filename/\" blog = \"/blog/:filename/\" # 是否启用顶层通知栏 [params.topbar] enable = false text = \"\"\"欢迎来到 Service Mesh 爱好者网站 \"\"\" # 是否启用右侧的小工具 [params.widgets] categories = true tags = true search = true [params.carousel] enable = true # 设置首页大风车的背景图片 background = \"https://ws1.sinaimg.cn/large/00704eQkgy1frlkpcfzt4j30zk0k0at2.jpg\" # 功能显示栏目 [params.features] enable = true # 社区活动栏目 [params.testimonials] enable = true title = \"社区活动\" subtitle = \"我们会不定期得在线上和线下举办精彩的活动，敬请关注，下面是历史活动记录\" # 参与进来栏目 [params.see_more] enable = true icon = \"fa fa-pagelines\" title = \"参与进来\" subtitle = \"加入 Service Mesh 爱好者群体\" link_url = \"/contact\" link_text = \"查看加入方式\" # 参与者栏目 [params.clients] enable = true title = \"参与者\" subtitle = \"Envoy官方文档中文版卓越贡献者\" # 最新博客栏目 [params.recent_posts] enable = true title = \"最新博客\" subtitle = \"社区参与者的博客与最 in 的新闻都在这里\" 资源目录 所有的静态资源保存在static目录下。 所有的自定义模块的配置都在data目录下，使用YAML格式配置。 JPG格式的图片使用微博图床保存。 因为微博图床只能保存JPG格式的图片，主题中使用了部分PNG格式（图片支持透明）保存在GitHub中。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "},"themes/hugo-universal-settings.html":{"url":"themes/hugo-universal-settings.html","title":"hugo-universal主题配置说明","keywords":"","body":"hugo-universal主题配置说明 该主题包括以下几个分模块，用来配置登录页面上的六个模块，其中有四个模块的自定义配置在data目录下，下面的模块顺序按出现在主页上的顺序排列： carousel：登录页面上的以风车形式显示的背景也页面以及页面上的文字 features：功能特性模块 clients：参与者配置 see_more：查看更多/参与进来，在config.toml中配置 recent_posts：最新博客，在config.toml中配置 testimonials：最新活动与客户评价 carousel 图 7.3.1：风车模块 示例配置如下： weight: 1 title: \"Envoy proxy\" description: > 开源 专为云原生应用而设计 边缘和服务间代理 Istio 默认的数据平面 访问 Envoy 中文文档 image: \"img/carousel/envoy-gitbook.png\" weight：权重，决定显示顺序 title：标题 description：支持HTML image：显示的图片 可以配置多个页面，每个页面分别在一个YAML文件中配置，可以配置多个，建议是偶数个，因为这样当在大页面中显示会比较好看。 features 示例配置如下： weight: 1 name: \"智能路由和负载均衡\" icon: \"fa fa-exchange\" description: \"控制服务间流量并进行动态负载均衡\" weight：图标的权重 name：显示的标题 icon：使用awesome-font CSS中的icon description：描述 每个图标的配置都在一个单独的YAML中，可以配置多个，建议是偶数个，因为这样当在大页面中显示会比较好看。 testimonials 图 7.3.2：testimonials模块 示例配置如下： text: \"Envoy 最新版的官方文档中文版翻译活动正在进行中，赶快参与进来吧！参与翻译和校对，为社区贡献力量！[查看参与方式](https://github.com/servicemesher/envoy/blob/master/CODE_OF_CONDUCT.md)\" name: \"Jimmy Song\" position: \"发起者\" avatar: \"https://ws1.sinaimg.cn/large/00704eQkgy1frmobjwmuoj31z21z61ky.jpg\" text：支持HTML name：发布者名字 position：发布者头衔（SM capital即网站管理员） avatar：发布者头像，使用微博图床，图片为正方形，至少200*200像素 see_more 图 7.3.3：see more模块 示例配置如下： [params.see_more] enable = true icon = \"fa fa-pagelines\" title = \"参与进来\" subtitle = \"加入 Service Mesh 爱好者群体\" link_url = \"/contact\" link_text = \"查看加入方式\" icon：图标配置，图标来自awesome-font CSS title：标题 subtitle：副标题 link_url：链接URL link_text：按钮上的文字 recent_posts 配置项如下： [params.recent_posts] enable = true title = \"最新博客\" subtitle = \"社区参与者的博客与最 in 的新闻都在这里\" 该配置是在config.toml中配置的。 图片说明 除了PNG格式的图片，其它图片都使用微博图床，默认的本地图片位置在static/img目录下，该目录下包括如下图片： 文件/目录名称 说明 大小（像素） 是否透明 apple-touch-icon.png 在苹果触摸设备上（如iPhone和iPad上）显示的网站favicon 128*128 是 carousel目录 风车中的图片 800*400 是 clients 参与者配置中的图片，图片中间显示为原型 320*180 是 favicon.ico favicon 128*128 是 logo-small.png 在小屏幕上（如手机）显示的logo图片，现在默认使用图片根logo.png，可以再弄个小点的图片 187*42 是 logo.png 默认的网站logo，显示在页面左上角 187*42 是 以上图片是必须在网站中存储和使用的图片，还有一些地方使用图床中的图片，不需要在本地保存，请参考config.toml中的说明。 其它配置 其它配置都在 config.toml 中，请参考hugo-universal主题模块说明。 Copyright © jimmysong.io 2017-2020 all right reserved，powered by GitbookUpdated at: 2020-08-25 15:19:17 "}}